name: CI with GCP OIDC Auth

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required for OIDC authentication to GCP
permissions:
  contents: read
  id-token: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Display Node.js and npm versions
        run: |
          node --version
          npm --version

      - name: Debug: environment and event BEFORE auth (DETAILED)
        run: |
          echo "=== Basic GitHub vars ==="
          echo "GITHUB_REPOSITORY=${GITHUB_REPOSITORY:-<unset>}"
          echo "GITHUB_REF=${GITHUB_REF:-<unset>}"
          echo "GITHUB_SHA=${GITHUB_SHA:-<unset>}"
          echo "GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME:-<unset>}"
          echo "GITHUB_ACTOR=${GITHUB_ACTOR:-<unset>}"
          echo "github.ref (from context) won't be available here as an expression; see GITHUB_REF above"
          echo
          echo "=== Full environment (filtered) ==="
          # Print only lines relevant to GitHub/Actions to avoid huge output
          env | grep -E 'GITHUB_|ACTIONS_' || true
          echo
          echo "=== GITHUB_EVENT_PATH (event payload) ==="
          if [ -n "${GITHUB_EVENT_PATH:-}" ] && [ -f "${GITHUB_EVENT_PATH}" ]; then
            echo "Event file exists at ${GITHUB_EVENT_PATH}; showing first 2000 chars:"
            head -c 2000 "${GITHUB_EVENT_PATH}" || true
            echo; echo "---- end event head ----"
          else
            echo "No GITHUB_EVENT_PATH file available"
          fi
          echo
          echo "=== On-main check ==="
          if [ "${GITHUB_REF:-}" = "refs/heads/main" ]; then
            echo "On main: yes"
          else
            echo "On main: no (GITHUB_REF=${GITHUB_REF:-<unset>})"
          fi
          echo
          echo "=== End debug ==="

      # Authenticate to Google Cloud using Workload Identity Federation (OIDC)
      # Only attempt authentication when the workflow is running on main.
      - name: Authenticate to Google Cloud
        id: auth
        if: ${{ startsWith(github.ref, 'refs/heads/main') }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: Notify if GCP auth is skipped
        if: ${{ always() }}
        run: |
          PROVIDER='${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          SA='${{ secrets.GCP_SERVICE_ACCOUNT }}'
          echo "GitHub ref: ${GITHUB_REF:-<unset>}"
          if [ "${GITHUB_REF:-}" != "refs/heads/main" ]; then
            echo "⚠️  GCP authentication skipped - workflow is not running on main"
            exit 0
          fi
          if [ -z "${PROVIDER}" ] || [ -z "${SA}" ]; then
            echo "⚠️  GCP authentication skipped - repository secrets not configured"
            [ -z "${PROVIDER}" ] && echo "  - GCP_WORKLOAD_IDENTITY_PROVIDER (empty)"
            [ -z "${SA}" ] && echo "  - GCP_SERVICE_ACCOUNT (empty)"
            exit 0
          fi
          echo "✅ Running on main and secrets present — Authenticate step will run (or ran)."

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Verify GCP authentication
        if: steps.auth.outcome == 'success'
        run: |
          echo "✅ Successfully authenticated to GCP using Workload Identity Federation"
          if [ -n "${GOOGLE_APPLICATION_CREDENTIALS:-}" ]; then
            echo "GOOGLE_APPLICATION_CREDENTIALS is set to: ${GOOGLE_APPLICATION_CREDENTIALS}"
            ls -l "${GOOGLE_APPLICATION_CREDENTIALS}" || true
            echo "Print first 500 chars of credentials file (sanity):"
            head -c 500 "${GOOGLE_APPLICATION_CREDENTIALS}" || true
          else
            echo "GOOGLE_APPLICATION_CREDENTIALS is not set"
          fi
          gcloud auth list || true
